#!groovy
/* groovylint-disable */
import uk.gov.hmcts.contino.GithubAPI

@Library('Infrastructure')

def type = 'angular'
def product = 'opal'
def component = 'frontend'

def secrets = [
  'opal-${env}': [
    secret('OpalTestUserEmail', 'OPAL_TEST_USER_EMAIL'),
    secret('OpalTestUserPassword', 'OPAL_TEST_USER_PASSWORD')
  ],
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
    secretType : 'Secret',
    name       : secretName,
    version    : '',
    envVariable: envVar
  ]
}

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def getProjectName() {
  String projectPrefix = 'HMCTS/opal-frontend/'
  def githubApi = new GithubAPI(this)
  echo "Branch name: ${env.BRANCH_NAME}"
  echo "Labels: ${githubApi.getLabels(env.BRANCH_NAME)}"
  for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, 'opal-frontend-pr-')) {
    String prNumber = label.substring(21, label.length())
    return projectPrefix + 'PR-' + prNumber
  }
  return projectPrefix + 'master'
}
def getProjectLabels() {
  def githubApi = new GithubAPI(this)
  def testLabels = []
  for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, 'test_')) {
    testLabels.add(label)
  }
  return testLabels
}
def performArtifactOperations() {
    sh 'mkdir -p cypress/parallel/weights/pipeline'

    sh '''
    echo "Listing all artifacts before copy artifacts:"
    ls -l1a cypress/parallel/weights/
    ls -l1a cypress/parallel/weights/pipeline/
    '''

    script {
        def projectName = getProjectName()
        try {
            copyArtifacts projectName: projectName, selector: lastSuccessful(), filter: '**/cypress/parallel/weights/pipeline/*'
        } catch (Exception e) {
            echo "Error copying artifacts: ${e}"
        }

        sh '''
        echo "Listing all artifacts after copy artifacts:"
        ls -l1a cypress/parallel/weights/
        ls -l1a cypress/parallel/weights/pipeline/
        '''
    }

    try {
        sh '''
        if [ -f cypress/parallel/weights/pipeline/smoke-parallel-weights.json ]; then
            mv cypress/parallel/weights/pipeline/smoke-parallel-weights.json cypress/parallel/weights/smoke-parallel-weights.json
            echo "Moved smoke-parallel-weights.json"
        else
            echo "smoke-parallel-weights.json not found, skipping move"
        fi
        if [ -f cypress/parallel/weights/pipeline/functional-parallel-weights.json ]; then
            mv cypress/parallel/weights/pipeline/functional-parallel-weights.json cypress/parallel/weights/functional-parallel-weights.json
            echo "Moved functional-parallel-weights.json"
        else
            echo "functional-parallel-weights.json not found, skipping move"
        fi
        if [ -f cypress/parallel/weights/pipeline/component-parallel-weights.json ]; then
            mv cypress/parallel/weights/pipeline/component-parallel-weights.json cypress/parallel/weights/component-parallel-weights.json
            echo "Moved component-parallel-weights.json"
        else
            echo "component-parallel-weights.json not found, skipping move"
        fi
        '''
    } catch (Exception e) {
        echo "Artifacts not found or copy failed: ${e}"
    }

    sh '''
    echo "Listing all copied artifacts:"
    ls -l1a cypress/parallel/weights/
    ls -l1a cypress/parallel/weights/pipeline/
    '''
}

def setupTestSpecifications() {
    script {
        def projectName = getProjectName()
        def labels = getProjectLabels()
        sh "echo 'Test Labels: ${labels}'"

        def directories = []

        // Add additional labels as needed
        if (labels.contains('test_enq')) {
            directories.add('accountEnquiry')
        }
        if (labels.contains('test_remo')) {
            directories.add('reciprocalMaintenance')
        }
        if (labels.contains('test_mac')) {
            directories.add('manualAccountCreation')
        }
        sh "echo 'Directories: ${directories}'"

        if (directories.isEmpty() || projectName == 'HMCTS/opal-frontend/master') {
            // No specific test labels, include all directories
            env.TEST_SPECS = 'cypress/e2e/functional/opal/**/*.feature'
        } else {
            // Build the glob pattern using curly braces
            def dirList = directories.join(',')
            env.TEST_SPECS = "cypress/e2e/functional/opal/{required,${dirList}}/**/*.feature"
        }
        sh "echo 'Test Specs: ${env.TEST_SPECS}'"
    }
}

properties([
    copyArtifactPermission('*')
])

withPipeline(type, product, component) {
  loadVaultSecrets(secrets)
  afterSuccess('build') {
    yarnBuilder.yarn('rebuild puppeteer')
    yarnBuilder.yarn('build')
  }
    afterSuccess('checkout') {
    performArtifactOperations()
    setupTestSpecifications()
}

  afterSuccess('test') {
    script {
        def sourceJobName = env.JOB_NAME
        sh' mkdir -p cypress/parallel/weights/pipeline'
        sh 'cp -r cypress/parallel/weights/component-parallel-weights.json cypress/parallel/weights/pipeline/'
        sh"echo 'Archiving weight files in ${sourceJobName}'"
        archiveArtifacts artifacts: 'cypress/parallel/weights/pipeline/component-parallel-weights.json', allowEmptyArchive: true
        }
  }
  afterAlways('test'){
    archiveArtifacts artifacts: 'functional-output/**', allowEmptyArchive: true
  }

  afterSuccess('functionalTest:dev') {
    script {
      def sourceJobName = env.JOB_NAME
      sh' mkdir -p cypress/parallel/weights/pipeline'
      sh' cp -r cypress/parallel/weights/smoke-parallel-weights.json cypress/parallel/weights/pipeline/'
      sh 'cp -r cypress/parallel/weights/functional-parallel-weights.json cypress/parallel/weights/pipeline/'

      sh"echo 'Archiving weight files in ${sourceJobName}'"
      archiveArtifacts artifacts: 'cypress/parallel/weights/pipeline/smoke-parallel-weights.json', allowEmptyArchive: true
      archiveArtifacts artifacts: 'cypress/parallel/weights/pipeline/functional-parallel-weights.json', allowEmptyArchive: true
      archiveArtifacts artifacts: 'cypress/reports/smokeXmlReport.html', allowEmptyArchive: true
      archiveArtifacts artifacts: 'cypress/reports/functionalXmlReport.html', allowEmptyArchive: true
    }
  }

  afterSuccess('functionalTest:stg') {
    script {
      def sourceJobName = env.JOB_NAME
      sh' mkdir -p cypress/parallel/weights/pipeline'
      sh' cp -r cypress/parallel/weights/smoke-parallel-weights.json cypress/parallel/weights/pipeline/'
      sh 'cp -r cypress/parallel/weights/functional-parallel-weights.json cypress/parallel/weights/pipeline/'

      sh"echo 'Archiving weight files in ${sourceJobName}'"
      archiveArtifacts artifacts: 'cypress/parallel/weights/pipeline/smoke-parallel-weights.json', allowEmptyArchive: true
      archiveArtifacts artifacts: 'cypress/parallel/weights/pipeline/functional-parallel-weights.json', allowEmptyArchive: true
      archiveArtifacts artifacts: 'cypress/reports/smokeXmlReport.html', allowEmptyArchive: true
      archiveArtifacts artifacts: 'cypress/reports/functionalXmlReport.html', allowEmptyArchive: true

    }
  }

      afterAlways('functionalTest:stg') {
      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "functional-output/prod/cucumber/",
        reportFiles          : "functional-report.html",
        reportName           : "Cucumber Functional Test Report"
    ]
      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "smoke-output/prod/cucumber/",
        reportFiles          : "smoke-report.html",
        reportName           : "Cucumber Smoke Test Report"
    ]
  }
  afterAlways('functionalTest:dev') {
      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "functional-output/prod/cucumber/",
        reportFiles          : "functional-report.html",
        reportName           : "Cucumber Functional Test Report"
    ]

      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "smoke-output/prod/cucumber/",
        reportFiles          : "smoke-report.html",
        reportName           : "Cucumber Smoke Test Report"
    ]
  }
}
