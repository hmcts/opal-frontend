#!groovy

@Library("Infrastructure")

def type = "angular"
def product = "opal"
def component = "frontend"

def secrets = [
  'opal-${env}': [
    secret('OpalTestUserEmail', 'OPAL_TEST_USER_EMAIL'),
    secret('OpalTestUserPassword', 'OPAL_TEST_USER_PASSWORD')
  ],
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

properties([
    copyArtifactPermission('HMCTS/opal-frontend/*')
])

withPipeline(type, product, component) {
  loadVaultSecrets(secrets)
  afterSuccess('build') {
    yarnBuilder.yarn('rebuild puppeteer')
    yarnBuilder.yarn('build')
  }

before('smoketest:dev') {
  script{
      def sourceJobName = env.JOB_NAME
      sh "echo 'dev: Copying weight files in ${sourceJobName}'"
      try{
        copyArtifacts projectName: sourceJobName, selector: lastSuccessful(), filter: 'cypress/parallel/weights/pipeline/smoke-parallel-weights.json'
        copyArtifacts projectName: sourceJobName, selector: lastSuccessful(), filter: 'cypress/parallel/weights/pipeline/functional-parallel-weights.json'

        sh '''
        if [ -f cypress/parallel/weights/pipeline/smoke-parallel-weights.json ]; then
            mv cypress/parallel/weights/pipeline/smoke-parallel-weights.json cypress/parallel/weights/smoke-parallel-weights.json
            echo "cypress/parallel/weights/pipeline/smoke-parallel-weights.json found, moving to cypress/parallel/weights/smoke-parallel-weights.json"
        else
            echo "cypress/parallel/weights/pipeline/smoke-parallel-weights.json not found, skipping move"
        fi
        if [ -f cypress/parallel/weights/pipeline/functional-parallel-weights.json ]; then
            mv cypress/parallel/weights/pipeline/functional-parallel-weights.json cypress/parallel/weights/functional-parallel-weights.json
            echo "cypress/parallel/weights/pipeline/functional-parallel-weights.json found, moving to cypress/parallel/weights/functional-parallel-weights.json"
        else
            echo "cypress/parallel/weights/pipeline/functional-parallel-weights.json not found, skipping move"
        fi
        '''
      } catch (Exception e) {
            echo "Artifacts not found or copy failed: ${e}"
        }
  }
}

afterSuccess('functionalTest:dev'){
    script {
      def sourceJobName = env.JOB_NAME
      sh' mkdir -p cypress/parallel/weights/pipeline'
      sh' cp -r cypress/parallel/weights/smoke-parallel-weights.json cypress/parallel/weights/pipeline/'
      sh 'cp -r cypress/parallel/weights/functional-parallel-weights.json cypress/parallel/weights/pipeline/'

      sh"echo 'Archiving weight files in ${sourceJobName}'"
      archiveArtifacts artifacts: 'cypress/parallel/weights/pipeline/smoke-parallel-weights.json', allowEmptyArchive: true
      archiveArtifacts artifacts: 'cypress/parallel/weights/pipeline/functional-parallel-weights.json', allowEmptyArchive: true
    }
}

before('smoketest:stg') {
  script{
      def sourceJobName = env.JOB_NAME
      sh "echo 'stg: Copying weight files in ${sourceJobName}'"
      try{
        copyArtifacts projectName: sourceJobName, selector: lastSuccessful(), filter: 'cypress/parallel/weights/pipeline/smoke-parallel-weights.json'
        copyArtifacts projectName: sourceJobName, selector: lastSuccessful(), filter: 'cypress/parallel/weights/pipeline/functional-parallel-weights.json'

        sh '''
        if [ -f cypress/parallel/weights/pipeline/smoke-parallel-weights.json ]; then
            mv cypress/parallel/weights/pipeline/smoke-parallel-weights.json cypress/parallel/weights/smoke-parallel-weights.json
            echo "cypress/parallel/weights/pipeline/smoke-parallel-weights.json found, moving to cypress/parallel/weights/smoke-parallel-weights.json"
        else
            echo "cypress/parallel/weights/pipeline/smoke-parallel-weights.json not found, skipping move"
        fi
        if [ -f cypress/parallel/weights/pipeline/functional-parallel-weights.json ]; then
            mv cypress/parallel/weights/pipeline/functional-parallel-weights.json cypress/parallel/weights/functional-parallel-weights.json
            echo "cypress/parallel/weights/pipeline/functional-parallel-weights.json found, moving to cypress/parallel/weights/functional-parallel-weights.json"
        else
            echo "cypress/parallel/weights/pipeline/functional-parallel-weights.json not found, skipping move"
        fi
        '''
      } catch (Exception e) {
            echo "Artifacts not found or copy failed: ${e}"
        }
  }
}

afterSuccess('functionalTest:stg'){
    script {
      def sourceJobName = env.JOB_NAME
      sh' mkdir -p cypress/parallel/weights/pipeline'
      sh' cp -r cypress/parallel/weights/smoke-parallel-weights.json cypress/parallel/weights/pipeline/'
      sh 'cp -r cypress/parallel/weights/functional-parallel-weights.json cypress/parallel/weights/pipeline/'

      sh"echo 'Archiving weight files in ${sourceJobName}'"
      archiveArtifacts artifacts: 'cypress/parallel/weights/pipeline/smoke-parallel-weights.json', allowEmptyArchive: true
      archiveArtifacts artifacts: 'cypress/parallel/weights/pipeline/functional-parallel-weights.json', allowEmptyArchive: true
    }
  }
}

