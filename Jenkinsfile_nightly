#!groovy

properties([
// H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
    pipelineTriggers([cron('H 07 * * 1-5')]),
    copyArtifactPermission('*'),
    parameters([
    booleanParam(name: 'Component', defaultValue: true, description: 'Run component tests'),
    booleanParam(name: 'Smoke', defaultValue: true, description: 'Run smoke tests'),
    booleanParam(name: 'Functional', defaultValue: true, description: 'Run functional tests'),
    booleanParam(name: 'Legacy', defaultValue: false, description: 'Run legacy tests'),
    booleanParam(name: 'RunEdge', defaultValue: false, description: 'Run Edge tests'),
    booleanParam(name: 'RunFirefox', defaultValue: false, description: 'Run Firefox tests'),
    choice(
      name: 'LEGACY_URL',
      choices: ['PRE-PROD', 'DEV'],
      description: 'Determines the URL to use for legacy tests.'
    ),
  ])
])

@Library("Infrastructure")

def type = "angular"
def product = "opal"
def component = "frontend"

def secrets = [
  'opal-${env}': [
    secret('OpalTestUserEmail', 'OPAL_TEST_USER_EMAIL'),
    secret('OpalTestUserPassword', 'OPAL_TEST_USER_PASSWORD')
  ],
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
    secretType : 'Secret',
    name       : secretName,
    version    : '',
    envVariable: envVar
  ]
}

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def performArtifactOperations() {
    sh 'mkdir -p cypress/parallel/weights/pipeline'

    sh '''
    echo "Listing all artifacts before copy artifacts:"
    ls -l1a cypress/parallel/weights/
    ls -l1a cypress/parallel/weights/pipeline/
    '''

    script {
        def projectName = 'HMCTS_Nightly/opal-frontend/master'
        try {
            copyArtifacts projectName: projectName, selector: lastSuccessful(), filter: '**/cypress/parallel/weights/pipeline/*'
        } catch (Exception e) {
            echo "Error copying artifacts: ${e}"
        }

        sh '''
        echo "Listing all artifacts after copy artifacts:"
        ls -l1a cypress/parallel/weights/
        ls -l1a cypress/parallel/weights/pipeline/
        '''
    }

    try {
        sh '''
        if [ -f cypress/parallel/weights/pipeline/smoke-parallel-weights.json ]; then
            mv cypress/parallel/weights/pipeline/smoke-parallel-weights.json cypress/parallel/weights/smoke-parallel-weights.json
            echo "Moved smoke-parallel-weights.json"
        else
            echo "smoke-parallel-weights.json not found, skipping move"
        fi
        if [ -f cypress/parallel/weights/pipeline/functional-parallel-weights.json ]; then
            mv cypress/parallel/weights/pipeline/functional-parallel-weights.json cypress/parallel/weights/functional-parallel-weights.json
            echo "Moved functional-parallel-weights.json"
        else
            echo "functional-parallel-weights.json not found, skipping move"
        fi
        if [ -f cypress/parallel/weights/pipeline/component-parallel-weights.json ]; then
            mv cypress/parallel/weights/pipeline/component-parallel-weights.json cypress/parallel/weights/component-parallel-weights.json
            echo "Moved component-parallel-weights.json"
        else
            echo "component-parallel-weights.json not found, skipping move"
        fi
        '''
    } catch (Exception e) {
        echo "Artifacts not found or copy failed: ${e}"
    }

    sh '''
    echo "Listing all copied artifacts:"
    ls -l1a cypress/parallel/weights/
    ls -l1a cypress/parallel/weights/pipeline/
    '''
}
def setupTestSpecifications() {
    script {
      env.TEST_SPECS = 'cypress/e2e/functional/opal/**/*.feature'
    }
}

withNightlyPipeline(type, product, component) {
  loadVaultSecrets(secrets)
  env.TEST_URL = "https://opal-frontend.staging.platform.hmcts.net/"


  afterSuccess('checkout') {
    performArtifactOperations()
    setupTestSpecifications()
  }

afterAlways('DependencyCheckNightly') {
  echo "Component:" + params.Component
  echo "Smoke:" + params.Smoke
  echo "Functional:" + params.Functional
  echo "Legacy:" + params.Legacy
  echo "RunEdge:" + params.RunEdge
  echo "RunFirefox:" + params.RunFirefox

      if (params.Component) {
      stage('Component Tests') {
        try{
          yarnBuilder.yarn('test:opalComponent')
        } catch (Exception e) {
          echo "Component tests failed: ${e}"
        }
        finally {
          archiveArtifacts artifacts: 'functional-output/prod/component-test-output-*.xml', allowEmptyArchive: true
          archiveArtifacts artifacts: 'functional-output/screenshots/component/**', allowEmptyArchive: true
        }
      }
    }
    if (params.Smoke) {
      stage('Smoke Tests') {
        try{
          yarnBuilder.yarn('test:smoke')
        } catch (Exception e) {
          echo "Smoke tests failed: ${e}"
        }
        finally {
          archiveArtifacts artifacts: 'smoke-output/prod/cucumber/**', allowEmptyArchive: true
          archiveArtifacts artifacts: 'smoke-output/screenshots/smoke/**', allowEmptyArchive: true

        publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "smoke-output/prod/cucumber/",
        reportFiles          : "smoke-report.html",
        reportName           : "Cucumber Smoke Test Report"
    ]
        }
      }
    }
    if (params.Functional) {
      stage('Functional Tests') {
        try{
          yarnBuilder.yarn('test:functional')
        } catch (Exception e) {
          echo "Functional tests failed: ${e}"
        } finally {
          archiveArtifacts artifacts: 'functional-output/prod/cucumber/**', allowEmptyArchive: true
          archiveArtifacts artifacts: 'functional-output/screenshots/functional/**', allowEmptyArchive: true

        publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "functional-output/prod/cucumber/",
        reportFiles          : "functional-report.html",
        reportName           : "Cucumber Functional Test Report"
    ]
        }
      }
    }
    if (params.Legacy) {
      stage('Legacy Tests') {
        try{
          yarnBuilder.yarn('yarn test:functionalLegacy ; yarn test:functionalLegacy:combine:reports ; yarn test:functionalLegacy:cucumber:combineParallelReport')
        } catch (Exception e) {
          echo "Legacy tests failed: ${e}"
        } finally {
          archiveArtifacts artifacts: 'functional-output/prod/legacy/**', allowEmptyArchive: true
          archiveArtifacts artifacts: 'functional-output/screenshots/legacy/**', allowEmptyArchive: true

          publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "functional-output/prod/legacy/",
            reportFiles          : "legacy-report.html",
            reportName           : "Legacy Functional Test Report"
          ]
        }
      }
    }
    if (params.RunEdge) {
      stage('Edge Tests') {
        try{
          yarnBuilder.yarn('test:Edge')
        } catch (Exception e) {
          echo "Edge tests failed: ${e}"
        } finally {
          archiveArtifacts artifacts: 'functional-output/prod/edge/**', allowEmptyArchive: true
          archiveArtifacts artifacts: 'functional-output/screenshots/edge/**', allowEmptyArchive: true

          publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "functional-output/prod/edge/cucumber/",
            reportFiles          : "edge-report.html",
            reportName           : "Edge Functional Test Report"
          ]
        }
      }
    }
    if (params.RunFirefox) {
      stage('Firefox Tests') {
        try{
          yarnBuilder.yarn('test:Firefox')
        } catch (Exception e) {
          echo "Firefox tests failed: ${e}"
        } finally {
          archiveArtifacts artifacts: 'functional-output/prod/firefox/**', allowEmptyArchive: true
          archiveArtifacts artifacts: 'functional-output/screenshots/firefox/**', allowEmptyArchive: true

          publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "functional-output/prod/firefox/",
            reportFiles          : "opal-mode-test-output-[hash].xml",
            reportName           : "Firefox Functional Test Report"
          ]
        }
      }
  }
  }

  afterSuccess('Functional Tests') {
    script {
      def sourceJobName = env.JOB_NAME
      sh' mkdir -p cypress/parallel/weights/pipeline'
      sh' cp -r cypress/parallel/weights/smoke-parallel-weights.json cypress/parallel/weights/pipeline/'
      sh 'cp -r cypress/parallel/weights/functional-parallel-weights.json cypress/parallel/weights/pipeline/'

      sh"echo 'Archiving weight files in ${sourceJobName}'"
      archiveArtifacts artifacts: 'cypress/parallel/weights/pipeline/smoke-parallel-weights.json', allowEmptyArchive: true
      archiveArtifacts artifacts: 'cypress/parallel/weights/pipeline/functional-parallel-weights.json', allowEmptyArchive: true
      archiveArtifacts artifacts: 'cypress/reports/smokeXmlReport.html', allowEmptyArchive: true
      archiveArtifacts artifacts: 'cypress/reports/functionalXmlReport.html', allowEmptyArchive: true
    }
  }
}
